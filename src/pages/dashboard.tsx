import type { NextPage } from "next";
import Head from "next/head";
import { AuthAction, useAuthUser, withAuthUser } from "next-firebase-auth";
import { toast } from "react-toastify";
import { useTodosQuery } from "~/hooks";
import { useState } from "react";

const DashBoard: NextPage = () => {
  const AuthUser = useAuthUser();
  const { data: todoQuery } = useTodosQuery();
  const [value, setValue] = useState("");

  return (
    <div data-theme="retro" className="bg-base-100 text-base-content">
      <Head>
        <title>TODO βベータ版 | ダッシュボード</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>

      {/* <div className="fixed w-full text-center bg-base-100 text-base-content py-2">
        <p>【開発者からのメッセージ】こちらはまだリリース前のサービスです。</p>
        <a className="link" href="https://forms.gle/1Kz5ndKhJdYVakwy7">
          こちらから早期アクセスプログラムに参加できます
        </a>
      </div> */}

      <main className="container mx-auto flex flex-col md:flex-row h-screen w-screen items-center justify-evenly">
        <input
          type="text"
          value={value}
          onChange={(v) => setValue(v.target.value)}
        />
        <button
          className="btn"
          onClick={() => {
            toast.info(value);
          }}
        >
          add
        </button>
        <ul>
          {todoQuery?.todos.map((todo) => (
            <li key={todo.id}>
              <input
                type="checkbox"
                name="todo"
                id={todo.id}
                checked={todo.completed}
                onChange={() => {
                  toast.info("Not Implement");
                }}
              />
              {todo.title}
            </li>
          ))}
        </ul>
        <button
          className="btn"
          onClick={async () => {
            await AuthUser.signOut();
            toast.success("ログアウトしました");
          }}
        >
          signout
        </button>
      </main>
    </div>
  );
};

export default withAuthUser({
  whenUnauthedAfterInit: AuthAction.REDIRECT_TO_LOGIN,
})(DashBoard);
